---

name: Альтернативная условная конструкция
theory: |

  В Go присутствует единственная альтернатива `if` — конструкция `switch`. Для этой конструкции используется стандартный синтаксис, но логика работы отличается от С-подобных языков. Когда срабатывает условие какого-либо `case`, программа выполняет блок и выходит из конструкции `switch` без необходимости писать `break`:

  ```go
  x := 10

  switch x {
  	default: // default всегда выполняется последним независимо от расположения в конструкции
  		fmt.Println("default case")
  	case 10:
  		fmt.Println("case 10")
  }
  ```

  Output:

  ```go
  case 10
  ```

  Однако при необходимости можно реализовать логику С-подобных языков и «провалиться» в следующий `case`:

  ```go
  x := 10

  switch { // выражение отсутствует. Для компилятора выглядит как: switch true
  	default:
  		fmt.Println("default case")
  	case x == 10:
  		fmt.Println("equal 10 case")
  		fallthrough
  	case x <= 10:
  		fmt.Println("less or equal 10 case")
  }
  ```

  Output:

  ```go
  equal 10 case
  less or equal 10 case
  ```


instructions: |
  Реализуйте функцию `ModifySpaces(s, mode string) string`, которая изменяет строку `s` в зависимости от переданного режима `mode`. Подробности в примере:

  ```go
  // когда передается mode "dash", нужно заменить все пробелы на дефисы "-"
  ModifySpaces("hello world", "dash") // hello-world

  // когда передается mode "underscore", нужно заменить все пробелы на нижние подчеркивания "_"
  ModifySpaces("hello world", "underscore") // hello_world

  // когда передается неизвестный или пустой mode, заменяем все пробелы на звездочки "*"
  ModifySpaces("hello world", "unknown") // hello*world
  ModifySpaces("hello world", "") // hello*world
  ```

  Для замены символов в строке существует функция `ReplaceAll(s, old, new string) string` из пакета `strings`:

  ```go
  strings.ReplaceAll("hello world", "world!", "buddy!") // hello buddy!

  strings.ReplaceAll("one two three", " ", "_") // one_two_three
  ```

tips:
  - |
    [The Go Programming Language Specification — Switch statements](https://golang.org/ref/spec#Switch_statements)
